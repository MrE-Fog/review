<html><head><meta charset="utf-8" /><meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="description" content="" /><meta name="author" content="Maxim Sokhatsky" /><title>REVIEW</title>
    <link rel="stylesheet" href="https://n2o.dev/blank.css" />
    <link rel="stylesheet" href="https://n2o.dev/zima.css" />
</head><body><nav>
    <a href="https://n2o.space/">SPEC</a>
    <a href="https://o7.n2o.space">O7</a>
    <a href="https://review.n2o.space">REVIEW</a>
</nav><header>
    <a href="../index.html"><img src="https://n2o.space/img/Synrc Neo.svg" /></a>
    <h1>REVIEW</h1>
</header><main>
    <section>


<h3>INTRO</h3>

<p>REVIEW is a regular Erlang application.</p>

    </section>
    <section>

<h3>HEADER</h3>

        <figure>
            <figcaption>Picture 1. HOW TO SET UP BOTH APP AND SUP IN ERLANG</figcaption>
            <code>
 -module(review).
 -behaviour(supervisor).
 -behaviour(application).
 -export([init/1, start/0, start/2, stop/1, main/1]).
 -compile(export_all).
            </code>
        </figure>

    </section>
    <section>

<h3>OTP</h3>

<p>Note that suring start you should specify mauth module.
   Dafault implementation performs client topic autosubscription.</p>

        <figure>
            <figcaption>Picture 2. Implements Erlang/OTP service API</figcaption>
            <code>
 init([])   -> {ok, {{one_for_one, 5, 10}, [spec()]}}.
 start()    -> start(normal,[]).
 start(_,_) -> emqttd_access_control:register_mod(auth, n2o_auth, [[]], 9998),
               supervisor:start_link({local,review},review,[]).
 stop(_)    -> ok.
            </code>
        </figure>

    </section>
    <section>

<h3>MOCHIWEB</h3>

<p>REVIEW application uses MOCHIWEB as static HTTP server
   and as WebSocket proxy to MQTT server.</p>

        <figure>
            <figcaption>Picture 3. MOCHIWEB setup</figcaption>
            <code>
 spec()     ->
    Acceptors  = application:get_env(?MODULE, acceptors,   4),
    Clients    = application:get_env(?MODULE, max_clients, 512),
    Protocol   = application:get_env(?MODULE, protocol,    http),
    Port       = application:get_env(?MODULE, port,        8000),
    Options    = [{max_clients, Clients}, {acceptors, Acceptors}],
    Args       = [{mochiweb, handle, [docroot()]}],
    mochiweb:child_spec(Protocol, Port, Options, Args).

 docroot() ->
    {file, Here} = code:is_loaded(?MODULE),
    Dir = filename:dirname(filename:dirname(Here)),
    Root = application:get_env(?MODULE, "statics_root", "priv/static"),
    filename:join([Dir, Root]).
            </code>
        </figure>

    </section>
</main><footer>
    2005—2018 © Synrc Research Center
</footer></body></html>